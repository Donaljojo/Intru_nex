<?php

namespace App\Modules\AssetVulnerability\Controller;

use App\Modules\AssetVulnerability\Entity\Vulnerability;
use App\Modules\AssetVulnerability\Form\VulnerabilityType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/vulnerabilities')]
class VulnerabilityController extends AbstractController
{
    #[Route('/', name: 'vulnerability_list', methods: ['GET'])]
    public function list(EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_USER');

        $vulnerabilities = $em->getRepository(Vulnerability::class)->findAll();

        return $this->render('asset_vulnerability/vulnerability/list.html.twig', [
            'vulnerabilities' => $vulnerabilities,
        ]);
    }

    #[Route('/create', name: 'vulnerability_create', methods: ['GET', 'POST'])]
    public function create(Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_USER');

        $vulnerability = new Vulnerability();
        $form = $this->createForm(VulnerabilityType::class, $vulnerability);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em->persist($vulnerability);
            $em->flush();

            $this->addFlash('success', 'Vulnerability created successfully.');

            return $this->redirectToRoute('vulnerability_list');
        }

        return $this->render('asset_vulnerability/vulnerability/create.html.twig', [
            'form' => $form->createView(),
        ]);
    }

    #[Route('/{id}/edit', name: 'vulnerability_edit', methods: ['GET', 'POST'])]
    public function edit(Vulnerability $vulnerability, Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_USER');

        $form = $this->createForm(VulnerabilityType::class, $vulnerability);

        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $em->flush();

            $this->addFlash('success', 'Vulnerability updated successfully.');

            return $this->redirectToRoute('vulnerability_list');
        }

        return $this->render('asset_vulnerability/vulnerability/edit.html.twig', [
            'form' => $form->createView(),
            'vulnerability' => $vulnerability,
        ]);
    }

    #[Route('/{id}/delete', name: 'vulnerability_delete', methods: ['POST'])]
    public function delete(Vulnerability $vulnerability, Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_USER');

        if ($this->isCsrfTokenValid('delete-vulnerability' . $vulnerability->getId(), $request->request->get('_token'))) {
            $em->remove($vulnerability);
            $em->flush();

            $this->addFlash('success', 'Vulnerability deleted successfully.');
        } else {
            $this->addFlash('error', 'Invalid CSRF token.');
        }

        return $this->redirectToRoute('vulnerability_list');
    }
}
