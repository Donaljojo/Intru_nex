<?php

namespace App\Modules\AssetVulnerability\Service;

use App\Modules\AssetDiscovery\Entity\Asset;
use App\Modules\AssetVulnerability\Entity\Vulnerability;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class GithubAdvisoryImportService
{
    private EntityManagerInterface $em;
    private HttpClientInterface $httpClient;
    private LoggerInterface $logger;
    private string $githubToken;

    public function __construct(EntityManagerInterface $em, HttpClientInterface $httpClient, LoggerInterface $logger, string $githubToken)
    {
        $this->em = $em;
        $this->httpClient = $httpClient;
        $this->logger = $logger;
        $this->githubToken = $githubToken;
    }

    public function importRecentAdvisories(int $first = 20): void
    {
        $query = <<<'GRAPHQL'
query($first: Int!) {
  securityAdvisories(first: $first, orderBy: {field: PUBLISHED_AT, direction: DESC}) {
    nodes {
      ghsaId
      severity
      description
      publishedAt
      identifiers {
        type
        value
      }
    }
  }
}
GRAPHQL;

        try {
            $response = $this->httpClient->request('POST', 'https://api.github.com/graphql', [
                'headers' => [
                    'Authorization' => 'Bearer ' . $this->githubToken,
                    'User-Agent' => 'IntruNex-GHAdvisoryImport/1.0',
                    'Content-Type' => 'application/json',
                ],
                'json' => [
                    'query' => $query,
                    'variables' => ['first' => $first]
                ],
            ]);

            $result = $response->toArray();

            $advisories = $result['data']['securityAdvisories']['nodes'] ?? [];

            foreach ($advisories as $advisory) {
                $this->importSingleAdvisory($advisory);
            }

            $this->em->flush();

        } catch (\Throwable $e) {
            $this->logger->error('Failed to import GitHub security advisories: ' . $e->getMessage());
        }
    }

    private function importSingleAdvisory(array $advisory): void
    {
        $cveId = null;
        foreach ($advisory['identifiers'] as $id) {
            if ($id['type'] === 'CVE') {
                $cveId = $id['value'];
                break;
            }
        }
        if (!$cveId) {
            // Optionally skip or fallback to GitHub advisory ID
            $cveId = $advisory['ghsaId'];
        }

        $description = $advisory['description'] ?? '';
        $severity = $advisory['severity'] ?? 'MODERATE';
        $publishedAt = $advisory['publishedAt'] ?? null;

        // Example: use a demo asset or customize asset matching as needed
        //$asset = $this->em->getRepository(Asset::class)->findOneBy(['name' => 'Demo Asset']);
        $asset = $this->em->getRepository(Asset::class)->findOneBy(['name' => 'machine1']);

        if (!$asset) {
            return;
        }

        $existing = $this->em->getRepository(Vulnerability::class)->findOneBy([
            'cveId' => $cveId,
            'asset' => $asset,
        ]);

        $dateObj = $publishedAt ? new \DateTime($publishedAt) : new \DateTime();

        if ($existing) {
            $existing->setDescription($description);
            $existing->setSeverity($severity);
            $existing->setDiscoveredAt($dateObj);
            $existing->setStatus('Open');
        } else {
            $vuln = new Vulnerability();
            $vuln->setAsset($asset);
            $vuln->setCveId($cveId);
            $vuln->setDescription($description);
            $vuln->setSeverity($severity);
            $vuln->setDiscoveredAt($dateObj);
            $vuln->setStatus('Open');
            $this->em->persist($vuln);
        }
    }
}
