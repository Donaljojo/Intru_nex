<?php

namespace App\Modules\AssetVulnerability\Service;

use App\Modules\AssetDiscovery\Entity\Asset;
use App\Modules\AssetVulnerability\Entity\Vulnerability;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;

class VulnerabilityImportService
{
    private EntityManagerInterface $em;
    private LoggerInterface $logger;

    public function __construct(EntityManagerInterface $em, LoggerInterface $logger)
    {
        $this->em = $em;
        $this->logger = $logger;
    }

    /**
     * Import vulnerabilities from given data array.
     *
     * @param array $vulnerabilityDataList Array of vulnerability data.
     */
    public function import(array $vulnerabilityDataList): void
    {
        foreach ($vulnerabilityDataList as $data) {
            try {
                $this->importSingleVulnerability($data);
            } catch (\Throwable $e) {
                $this->logger->error('Failed to import vulnerability: ' . $e->getMessage(), ['data' => $data]);
            }
        }

        $this->em->flush();
    }

    private function importSingleVulnerability(array $data): void
    {
        // Basic validation or skip incomplete data
        if (empty($data['cveId']) || empty($data['assetIp'])) {
            throw new \InvalidArgumentException('Missing required fields');
        }

        // Find asset by IP address (you can adjust matching strategy)
        $asset = $this->em->getRepository(Asset::class)->findOneBy(['ipAddress' => $data['assetIp']]);

        if (!$asset) {
            throw new \RuntimeException('Asset not found for IP: ' . $data['assetIp']);
        }

        // Check if vulnerability exists already for this CVE and asset
        $existing = $this->em->getRepository(Vulnerability::class)->findOneBy([
            'cveId' => $data['cveId'],
            'asset' => $asset,
        ]);

        if ($existing) {
            // Update existing vulnerability
            $existing->setDescription($data['description'] ?? $existing->getDescription());
            $existing->setSeverity($data['severity'] ?? $existing->getSeverity());
            $existing->setStatus($data['status'] ?? $existing->getStatus());
            $existing->setDiscoveredAt(new \DateTime($data['discoveredAt'] ?? 'now'));
        } else {
            // Create new vulnerability
            $vuln = new Vulnerability();
            $vuln->setAsset($asset);
            $vuln->setCveId($data['cveId']);
            $vuln->setDescription($data['description'] ?? '');
            $vuln->setSeverity($data['severity'] ?? 'Medium');
            $vuln->setStatus($data['status'] ?? 'Open');
            $vuln->setDiscoveredAt(new \DateTime($data['discoveredAt'] ?? 'now'));

            $this->em->persist($vuln);
        }
    }
}
