<?php

namespace App\Modules\AssetVulnerability\Service;

use App\Modules\AssetDiscovery\Entity\Asset;
use App\Modules\AssetVulnerability\Entity\Vulnerability;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Contracts\HttpClient\HttpClientInterface;

class NvdImportService
{
    private EntityManagerInterface $em;
    private HttpClientInterface $httpClient;
    private LoggerInterface $logger;
    private ?string $apiKey;

    public function __construct(EntityManagerInterface $em, HttpClientInterface $httpClient, LoggerInterface $logger, ?string $apiKey = null)
    {
        $this->em = $em;
        $this->httpClient = $httpClient;
        $this->logger = $logger;
        $this->apiKey = $apiKey;
    }

    /**
     * Import recent CVEs from NVD.
     *
     * @param int $resultsPerPage Number of CVEs to fetch per request, max 2000.
     */
    public function importRecentCves(int $resultsPerPage = 10): void
    {
        $url = 'https://services.nvd.nist.gov/rest/json/cves/1.0?resultsPerPage=' . $resultsPerPage;
        if ($this->apiKey) {
            $url .= '&apiKey=' . $this->apiKey;
        }

        try {
            $response = $this->httpClient->request('GET', $url, [
                'headers' => [
                    'User-Agent' => 'IntruNex ImportScript/1.0 (security-team@yourdomain.com)',
                ],
            ]);

            $data = $response->toArray();

            if (!isset($data['result']['CVE_Items'])) {
                $this->logger->error('NVD API response missing CVE_Items');
                return;
            }

            foreach ($data['result']['CVE_Items'] as $item) {
                $this->importSingleCve($item);
            }

            $this->em->flush();

        } catch (\Throwable $e) {
            $this->logger->error('Failed to fetch CVEs from NVD: ' . $e->getMessage());
        }
    }

    private function importSingleCve(array $item): void
    {
        $cveId = $item['cve']['CVE_data_meta']['ID'] ?? null;
        $description = $item['cve']['description']['description_data'][0]['value'] ?? '';
        $publishedDate = $item['publishedDate'] ?? null;
        $severity = $item['impact']['baseMetricV3']['cvssV3']['baseSeverity'] ?? 'Medium';

        // Adjust asset matching as per your assets data
        $asset = $this->em->getRepository(Asset::class)->findOneBy(['name' => 'Demo Asset']);

        if ($asset && $cveId) {
            $existing = $this->em->getRepository(Vulnerability::class)->findOneBy([
                'cveId' => $cveId,
                'asset' => $asset,
            ]);

            $dateObj = $publishedDate ? new \DateTime($publishedDate) : new \DateTime();

            if ($existing) {
                $existing->setDescription($description);
                $existing->setSeverity($severity);
                $existing->setDiscoveredAt($dateObj);
                $existing->setStatus('Open');
            } else {
                $vuln = new Vulnerability();
                $vuln->setAsset($asset);
                $vuln->setCveId($cveId);
                $vuln->setDescription($description);
                $vuln->setSeverity($severity);
                $vuln->setDiscoveredAt($dateObj);
                $vuln->setStatus('Open');
                $this->em->persist($vuln);
            }
        }
    }
}



