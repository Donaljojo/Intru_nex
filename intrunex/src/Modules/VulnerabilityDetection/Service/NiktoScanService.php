<?php

namespace App\Modules\VulnerabilityDetection\Service;

use App\Modules\AssetDiscovery\Entity\Asset;
use App\Modules\ScanManagement\Entity\ScanJob;
use App\Modules\VulnerabilityDetection\Message\NiktoScanMessage;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Messenger\MessageBusInterface;
use Symfony\Component\Process\Exception\ProcessFailedException;
use Symfony\Component\Process\Process;

class NiktoScanService
{
    private EntityManagerInterface $em;
    private LoggerInterface $logger;
    private MessageBusInterface $bus;
    private string $niktoBinary;

    public function __construct(EntityManagerInterface $em, LoggerInterface $logger, MessageBusInterface $bus, string $niktoBinary = 'nikto')
    {
        $this->em = $em;
        $this->logger = $logger;
        $this->bus = $bus;
        $this->niktoBinary = $niktoBinary;
    }

    public function scan(Asset $asset, ScanJob $scanJob): ScanJob
    {
        $this->bus->dispatch(new NiktoScanMessage($asset->getId(), $scanJob->getId()));

        $this->logger->info("Nikto scan dispatched for: {$asset->getName()}");

        return $scanJob;
    }

    public function performScan(Asset $asset): string
    {
        $target = $asset->getUrl() ?? $asset->getIpAddress() ?? $asset->getDomain();

        if (!$target) {
            throw new \RuntimeException('No valid target found for asset: ' . $asset->getId());
        }

        $this->logger->info("Starting Nikto scan for: {$target}");

        // ðŸ”¹ Create a temporary JSON output file
        $outputFile = sys_get_temp_dir() . '/nikto_' . uniqid() . '.json';

        // âœ… Correct command: include -output filename
        $process = new Process([
            $this->niktoBinary,
            '-h', $target,
            '-Format', 'json',
            '-output', $outputFile
        ]);
        $process->setTimeout(600);
        $process->run();

        if (!$process->isSuccessful()) {
            throw new ProcessFailedException($process);
        }

        // ðŸ”¹ Read JSON output from file
        if (!file_exists($outputFile)) {
            throw new \RuntimeException('Nikto scan did not produce an output file.');
        }

        $jsonText = file_get_contents($outputFile);
        unlink($outputFile); // clean up temp file

        return $jsonText;
    }
}
