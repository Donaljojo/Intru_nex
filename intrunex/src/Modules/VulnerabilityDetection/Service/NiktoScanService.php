<?php

namespace App\Modules\VulnerabilityDetection\Service;

use App\Modules\AssetDiscovery\Entity\Asset;
use App\Modules\AssetVulnerability\Entity\Vulnerability;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Process\Process;

class NiktoScanService
{
    private EntityManagerInterface $em;

    public function __construct(EntityManagerInterface $em)
    {
        $this->em = $em;
    }

    public function scan(Asset $asset): array
    {
        $target = $asset->getUrl() ?? $asset->getIpAddress();

        if (!$target) {
            throw new \RuntimeException("No valid target (URL/IP) found for asset ID " . $asset->getId());
        }

        // Run Nikto with JSON output
        $process = new Process(['nikto', '-h', $target, '-Format', 'json']);
        $process->setTimeout(300); // 5 minutes max
        $process->run();

        if (!$process->isSuccessful()) {
            throw new \RuntimeException('Nikto scan failed: ' . $process->getErrorOutput());
        }

        $output = $process->getOutput();

        // Decode JSON
        $json = json_decode($output, true);
        if ($json === null) {
            throw new \RuntimeException("Failed to decode Nikto JSON output.");
        }

        $findings = $this->parseNiktoJson($json);

        foreach ($findings as $finding) {
            $vuln = new Vulnerability();
            $vuln->setAsset($asset);
            $vuln->setCveId($finding['cve'] ?? null);
            $vuln->setDescription($finding['description']);
            $vuln->setSeverity($finding['severity']);
            $vuln->setStatus('Open');
            $vuln->setDiscoveredAt(new \DateTimeImmutable());

            $this->em->persist($vuln);
        }

        $this->em->flush();

        return $findings;
    }

    private function parseNiktoJson(array $json): array
    {
        $findings = [];

        if (!isset($json['vulnerabilities']) || !is_array($json['vulnerabilities'])) {
            return $findings; // no vulns found
        }

        foreach ($json['vulnerabilities'] as $vuln) {
            $description = $vuln['msg'] ?? 'Unknown vulnerability';
            $cve         = $vuln['id'] ?? null; // some have IDs
            $uri         = $vuln['uri'] ?? '';

            // Map severity heuristically
            $severity = 'Medium';
            if (isset($vuln['risk'])) {
                switch (strtolower($vuln['risk'])) {
                    case 'high': $severity = 'High'; break;
                    case 'low':  $severity = 'Low'; break;
                }
            }

            $findings[] = [
                'cve' => $cve,
                'description' => $description . ($uri ? " (URI: $uri)" : ''),
                'severity' => $severity,
            ];
        }

        return $findings;
    }
}





