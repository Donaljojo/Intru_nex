<?php

namespace App\Modules\VulnerabilityDetection\MessageAndHandler;

use App\Modules\VulnerabilityDetection\Service\NiktoScanService;
use App\Modules\ScanManagement\Entity\ScanJob;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class NiktoScanMessageHandler
{
    private NiktoScanService $niktoScanService;
    private EntityManagerInterface $em;
    private LoggerInterface $logger;

    public function __construct(
        NiktoScanService $niktoScanService,
        EntityManagerInterface $em,
        LoggerInterface $logger
    ) {
        $this->niktoScanService = $niktoScanService;
        $this->em = $em;
        $this->logger = $logger;
    }

    public function __invoke(NiktoScanMessage $message): void
    {
        $scanJob = $this->em->getRepository(ScanJob::class)->find($message->getScanJobId());

        if (!$scanJob) {
            $this->logger->error('ScanJob not found for ID: ' . $message->getScanJobId());
            return;
        }

        $asset = $scanJob->getAsset();

        // ---- Mark scan as running ----
        $scanJob->setStatus('Running');
        $scanJob->setStartedAt(new \DateTimeImmutable());
        $this->em->flush();

        try {
            // âœ… Fix: Handle null URL/IP safely outside string interpolation
            $target = $asset->getUrl() ?: $asset->getIpAddress();
            $this->logger->info(sprintf("Nikto scan started for asset: %s (%s)", $asset->getName(), isset($target) ? $target : 'Unknown target'));

            $results = $this->niktoScanService->scan($asset);

            $scanJob->setStatus('Completed');
            $scanJob->setCompletedAt(new \DateTimeImmutable());
            $scanJob->setResultSummary('Found ' . count($results) . ' vulnerabilities');
            $this->em->flush();

            $this->logger->info(sprintf(
                "Nikto scan completed for asset ID %d with %d vulnerabilities.",
                $asset->getId(),
                count($results)
            ));

        } catch (\Throwable $e) {
            // ---- Handle any errors gracefully ----
            $this->logger->error(sprintf(
                'Nikto scan failed for asset ID %d: %s',
                $asset->getId(),
                $e->getMessage()
            ));

            $scanJob->setStatus('Failed');
            $scanJob->setErrorMessage($e->getMessage());
            $scanJob->setCompletedAt(new \DateTimeImmutable());
            $this->em->flush();

            // Let Messenger retry automatically
            throw $e;
        }
    }
}





