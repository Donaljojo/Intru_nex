<?php

namespace App\Modules\VulnerabilityDetection\MessageHandler;

use App\Modules\AssetVulnerability\Entity\Vulnerability;
use App\Modules\VulnerabilityDetection\Message\NiktoScanMessage;
use App\Modules\VulnerabilityDetection\Service\NiktoScanService;
use App\Modules\ScanManagement\Entity\ScanJob;
use Doctrine\ORM\EntityManagerInterface;
use Psr\Log\LoggerInterface;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;

#[AsMessageHandler]
class NiktoScanMessageHandler
{
    private NiktoScanService $niktoScanService;
    private EntityManagerInterface $em;
    private LoggerInterface $logger;

    public function __construct(
        NiktoScanService $niktoScanService,
        EntityManagerInterface $em,
        LoggerInterface $logger
    ) {
        $this->niktoScanService = $niktoScanService;
        $this->em = $em;
        $this->logger = $logger;
    }

    public function __invoke(NiktoScanMessage $message): void
    {
        $scanJob = $this->em->getRepository(ScanJob::class)->find($message->getScanJobId());

        if (!$scanJob) {
            $this->logger->error('ScanJob not found for ID: ' . $message->getScanJobId());
            return;
        }

        $asset = $scanJob->getAsset();

        // ---- Mark scan as running ----
        $scanJob->setStatus('Running');
        $scanJob->setStartedAt(new \DateTimeImmutable());
        $this->em->flush();

        try {
            // âœ… Fix: Handle null URL/IP safely outside string interpolation
            $target = $asset->getUrl() ?: $asset->getIpAddress();
            $this->logger->info(sprintf("Nikto scan started for asset: %s (%s)", $asset->getName(), isset($target) ? $target : 'Unknown target'));

            $jsonText = $this->niktoScanService->performScan($asset);
            $decoded = json_decode($jsonText, true);
            if ($decoded === null) {
                throw new \RuntimeException('Failed to decode Nikto JSON output. Raw output: ' . substr($jsonText, 0, 300));
            }

            $findings = $this->parseNiktoJson($decoded);

            // ğŸ”¹ Store vulnerabilities
            foreach ($findings as $f) {
                $criteria = [
                    'asset' => $asset,
                ];
                if (!empty($f['id'])) {
                    $criteria['cveId'] = $f['id'];
                } else {
                    $criteria['description'] = $f['msg'] ?? 'No description';
                }

                $existingVulnerability = $this->em->getRepository(Vulnerability::class)->findOneBy($criteria);

                if (!$existingVulnerability) {
                    $vuln = new Vulnerability();
                    $vuln->setAsset($asset);
                    $vuln->setCveId($f['id'] ?? null);
                    $vuln->setDescription($f['msg'] ?? 'No description');
                    $vuln->setSeverity($f['severity'] ?? 'Medium');
                    $vuln->setStatus('Open');
                    $vuln->setDiscoveredAt(new \DateTimeImmutable());

                    $this->em->persist($vuln);
                }
            }

$scanJob->setFinishedAt(new \DateTimeImmutable());
            $scanJob->setResultSummary('Found ' . count($findings) . ' vulnerabilities');
            $this->em->flush();

            $this->logger->info(sprintf(
                "Nikto scan completed for asset ID %d with %d vulnerabilities.",
                $asset->getId(),
                count($findings)
            ));

        } catch (\Throwable $e) {
            // ---- Handle any errors gracefully ----
            $this->logger->error(sprintf(
                'Nikto scan failed for asset ID %d: %s',
                $asset->getId(),
                $e->getMessage()
            ));

            $scanJob->setStatus('Failed');
            $scanJob->setErrorMessage($e->getMessage());
            $scanJob->setCompletedAt(new \DateTimeImmutable());
            $this->em->flush();

            // Let Messenger retry automatically
            throw $e;
        }
    }

    private function parseNiktoJson(array $decoded): array
    {
        $results = [];

        foreach ($decoded as $hostData) {
            if (isset($hostData['vulnerabilities']) && is_array($hostData['vulnerabilities'])) {
                foreach ($hostData['vulnerabilities'] as $vuln) {
                    $results[] = [
                        'id' => $vuln['id'] ?? null,
                        'msg' => $vuln['msg'] ?? '',
                        'url' => $vuln['url'] ?? '',
                        'severity' => $this->determineSeverity($vuln['msg'] ?? ''),
                    ];
                }
            }
        }

        return $results;
    }

    private function determineSeverity(string $msg): string
    {
        $msg = strtolower($msg);
        if (str_contains($msg, 'critical') || str_contains($msg, 'vulnerability')) {
            return 'High';
        }
        if (str_contains($msg, 'missing') || str_contains($msg, 'not set')) {
            return 'Medium';
        }
        return 'Low';
    }
}